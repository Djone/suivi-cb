# Étape 1: Build de l'application Angular en utilisant un "builder"
FROM node:20-alpine AS builder

# Définir le répertoire de travail dans le conteneur
WORKDIR /app

# Copier les fichiers de définition du projet (package.json, etc.)
COPY frontend/package*.json ./

# Installer les dépendances. 'npm ci' est plus rapide et plus fiable pour les builds.
RUN npm ci

# Copier tout le code source du frontend
COPY frontend/ ./

# Lancer le build de production. La sortie sera dans /app/dist/suivi-cb/browser
RUN npm run build -- --configuration production

# ---

# Étape 2: Servir l'application avec un serveur Nginx léger
FROM nginx:1.25-alpine

# Supprimer la configuration Nginx par défaut
RUN rm /etc/nginx/conf.d/default.conf

# Copier notre configuration Nginx personnalisée qui sait gérer une SPA
COPY nginx.conf /etc/nginx/nginx.conf

# Copier les fichiers de l'application Angular depuis l'étape "builder".
# Le chemin de sortie est /app/dist/frontend/browser car le nom du projet dans package.json est "frontend".
COPY --from=builder /app/dist/frontend/browser /usr/share/nginx/html

# Exposer le port 80, qui est le port par défaut de Nginx
EXPOSE 80

# Commande pour démarrer Nginx en avant-plan lorsque le conteneur se lance
CMD ["nginx", "-g", "daemon off;"]
